
# CONF_VERSION is increased each time build/conf/ changes incompatibly
CONF_VERSION = "1"

# Which files do we want to parse:
BBMASK = ""

# Don't generate the mirror tarball for SCM repos, the snapshot is enough
BB_GENERATE_MIRROR_TARBALLS = "0"

# Disable build time patch resolution. This would lauch a devshell
# and wait for manual intervention. We disable it.
PATCHRESOLVE = "noop"

#
# Parallelism Options
#
# These two options control how much parallelism BitBake should use. The first
# option determines how many tasks bitbake should run in parallel:
# Default to setting automatically based on cpu count
BB_NUMBER_THREADS ?= "${@oe.utils.cpu_count()}"

#
# The second option controls how many processes make should run in parallel when
# running compile tasks:
# Default to setting automatically based on cpu count
PARALLEL_MAKE ?= "-j ${@oe.utils.cpu_count()}"

#
# Shared-state files from other locations
#
# Shared state files are prebuilt cache data objects which can
# used to accelerate build time. This variable can be used to configure the system
# to search other mirror locations for these objects before it builds the data itself.
#
# This can be a filesystem directory, or a remote url such as http or ftp. These
# would contain the sstate-cache results from previous builds (possibly from other
# machines). This variable works like fetcher MIRRORS/PREMIRRORS and points to the
# cache locations to check for the shared objects.
#SSTATE_MIRRORS ?= "\
#file://.* http://someserver.tld/share/sstate/ \n \
#file://.* file:///some/local/dir/sstate/"

# enable PR service on build machine itself
# its good for a case when this is the only builder
# generating the feeds
#PRSERV_HOST = "localhost:0"

# Override default FETCHCMD_wget with increased timeout parameters
# -t: number of tries (default was 2)
# -T: network timeout in seconds (default was 30)
# The rest of the parameters are the same.
FETCHCMD_wget = "/usr/bin/env wget -t 10 -T 90 -nv --passive-ftp --no-check-certificate"

#mb: local modifcations start here...
RM_WORK_EXCLUDE += " u-boot fiptool-native virtual/kernel"

#local repo for u-boot
SRC_URI_pn-u-boot_foundation-armv8 = "git:///home/marek/repos/bsp_u-boot_gen3;branch=upstream_master;protocol=file"
SRCREV_pn-u-boot_foundation-armv8 = "${AUTOREV}"
LIC_FILES_CHKSUM_pn-u-boot_foundation-armv8 = "file://Licenses/README;md5=5a7450c57ffe5ae63fd732446b988025"

#mb: local repo for kernel
SRC_URI_pn-linux-yocto="git:///home/marek/repos/linux-yocto;protocol=file;name=machine;branch=v5.4/standard/base_marek; \
		        git:///home/marek/repos/yocto-kernel-cache;type=kmeta;name=meta;branch=yocto-5.4;destsuffix=kernel-meta"
SRCREV_machine_foundation-armv8 = "${AUTOREV}"
SRCREV_meta_foundation-armv8 = "${AUTOREV}"
KERNEL_VERSION_SANITY_SKIP = "1"

# mb: I care of ssh server so add it additionally
IMAGE_FEATURES += "ssh-server-dropbear"

# mb: LKMs
# core-image-miniaml doesn't contain the kernel modules.
# To add them go with MAGE_INSTALL_append
#  MACHINE_EXTRA_RRECOMMENDS += "kernel-module-mymodule"
#  PACKAGE_INSTALL not recommended. Internal variable.
#  IMAGE_FEATURES recommended
#  EXTRA_IMAGE_FEATURES recommended in local.conf
#
#IMAGE_INSTALL_append = " mymodule"
